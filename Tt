import pyodbc
from NetsparkerDB import NetsparkerDB
from CxDB import CxDB

# Assume NetsparkerDB is a class that handles ODBC connections
class NetsparkerDB:
    def __init__(self, connection_string):
        self.connection_string = connection_string
        self.connection = None

    def connect(self):
        self.connection = pyodbc.connect(self.connection_string)
    
    def close(self):
        if self.connection:
            self.connection.close()

# Assume CxDB is a class for managing DB login credentials and connections
class CxDB:
    def __init__(self, server, database, username, password):
        self.server = server
        self.database = database
        self.username = username
        self.password = password

    def get_connection_string(self):
        # Construct ODBC connection string
        return f'DRIVER={{SQL Server}};SERVER={self.server};DATABASE={self.database};UID={self.username};PWD={self.password}'

# Usage:
# Set up database login
db_login = CxDB(server='your_server', database='netsparker', username='your_username', password='your_password')

# Initialize ODBC connection class
netsparker_db = NetsparkerDB(connection_string=db_login.get_connection_string())

# Connect to the database
netsparker_db.connect()

# Define the query
query = """
SELECT C.name, C.email,
       (SELECT TOP 1 D.name 
        FROM Roles D
        JOIN UserRolewebsiteGroupMappings E ON D.Id = E.RoleID 
        WHERE C.Id = E.UserId) AS Role,
       B.Name, B.value, B.CreatedAt
FROM Useractions A
JOIN Useractionparameters B ON A.Id = B.userAction_Id
JOIN users C ON A.userId = C.Id;
"""

# Execute the query and fetch the result
df = pd.read_sql(query, netsparker_db.connection)

# Save the result to a CSV file
df.to_csv('user_data.csv', index=False)

# Close the database connection
netsparker_db.close()






import sys
from CxDB import CxDB
from NetsparkerDB import NetsparkerDB

def main():
    # Define environment and database
    env = 'uat'  # Use 'uat' as specified in the NetsparkerDB class
    netsparker_db = 'Netsparker'  # The database name for the NetsparkerDB class

    # Initialize the connections
    try:
        # Connect to the Netsparker database
        netsparker_connection = NetsparkerDB(env)
        
        # Connect to the CxDB (not explicitly needed based on provided SQL but shown for completeness)
        cx_connection = CxDB(env)

        # SQL query to execute
        sql_query = """
        USE netsparker;
        SELECT C.name, C.email,
            (SELECT TOP 1 D.name 
             FROM Roles D, UserRolewebsiteGroupMappings E 
             WHERE D.Id = E.RoleID AND C.Id = E.UserId) AS Role,
            B.Name, B.value, B.CreatedAt
        FROM Useractions A
        JOIN Useractionparameters B ON A.Id = B.userAction_Id
        JOIN users C ON A.userId = C.Id
        """

        # Execute the SQL query
        cursor = netsparker_connection.execute(sql_query)
        results = cursor.fetchall()

        # Print the results
        for row in results:
            print(row)

    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
    finally:
        # Close the connections
        if 'netsparker_connection' in locals():
            netsparker_connection.close()
        if 'cx_connection' in locals():
            cx_connection.close()

if __name__ == "__main__":
    main()
